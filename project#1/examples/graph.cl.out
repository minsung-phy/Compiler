038:[CLASS] class
038:[TYPE] Graph
038:[LBRACE] {
040:[ID] vertices
040:[COLON] :
040:[TYPE] VList
040:[ASSIGN] <-
040:[NEW] new
040:[TYPE] VList
040:[SEMICOLON] ;
041:[ID] edges
041:[COLON] :
041:[TYPE] EList
041:[ASSIGN] <-
041:[NEW] new
041:[TYPE] EList
041:[SEMICOLON] ;
043:[ID] add_vertice
043:[LPAREN] (
043:[ID] v
043:[COLON] :
043:[TYPE] Vertice
043:[RPAREN] )
043:[COLON] :
043:[TYPE] Object
043:[LBRACE] {
043:[LBRACE] {
044:[ID] edges
044:[ASSIGN] <-
044:[ID] v
044:[DOT] .
044:[ID] outgoing
044:[LPAREN] (
044:[RPAREN] )
044:[DOT] .
044:[ID] append
044:[LPAREN] (
044:[ID] edges
044:[RPAREN] )
044:[SEMICOLON] ;
045:[ID] vertices
045:[ASSIGN] <-
045:[ID] vertices
045:[DOT] .
045:[ID] cons
045:[LPAREN] (
045:[ID] v
045:[RPAREN] )
045:[SEMICOLON] ;
046:[RBRACE] }
046:[RBRACE] }
046:[SEMICOLON] ;
048:[ID] print_E
048:[LPAREN] (
048:[RPAREN] )
048:[COLON] :
048:[TYPE] Object
048:[LBRACE] {
048:[ID] edges
048:[DOT] .
048:[ID] print
048:[LPAREN] (
048:[RPAREN] )
048:[RBRACE] }
048:[SEMICOLON] ;
049:[ID] print_V
049:[LPAREN] (
049:[RPAREN] )
049:[COLON] :
049:[TYPE] Object
049:[LBRACE] {
049:[ID] vertices
049:[DOT] .
049:[ID] print
049:[LPAREN] (
049:[RPAREN] )
049:[RBRACE] }
049:[SEMICOLON] ;
051:[RBRACE] }
051:[SEMICOLON] ;
053:[CLASS] class
053:[TYPE] Vertice
053:[INHERITS] inherits
053:[TYPE] IO
053:[LBRACE] {
055:[ID] num
055:[COLON] :
055:[TYPE] Int
055:[SEMICOLON] ;
056:[ID] out
056:[COLON] :
056:[TYPE] EList
056:[ASSIGN] <-
056:[NEW] new
056:[TYPE] EList
056:[SEMICOLON] ;
058:[ID] outgoing
058:[LPAREN] (
058:[RPAREN] )
058:[COLON] :
058:[TYPE] EList
058:[LBRACE] {
058:[ID] out
058:[RBRACE] }
058:[SEMICOLON] ;
060:[ID] number
060:[LPAREN] (
060:[RPAREN] )
060:[COLON] :
060:[TYPE] Int
060:[LBRACE] {
060:[ID] num
060:[RBRACE] }
060:[SEMICOLON] ;
062:[ID] init
062:[LPAREN] (
062:[ID] n
062:[COLON] :
062:[TYPE] Int
062:[RPAREN] )
062:[COLON] :
062:[TYPE] SELF_TYPE
062:[LBRACE] {
063:[LBRACE] {
064:[ID] num
064:[ASSIGN] <-
064:[ID] n
064:[SEMICOLON] ;
065:[ID] self
065:[SEMICOLON] ;
066:[RBRACE] }
067:[RBRACE] }
067:[SEMICOLON] ;
070:[ID] add_out
070:[LPAREN] (
070:[ID] s
070:[COLON] :
070:[TYPE] Edge
070:[RPAREN] )
070:[COLON] :
070:[TYPE] SELF_TYPE
070:[LBRACE] {
071:[LBRACE] {
072:[ID] out
072:[ASSIGN] <-
072:[ID] out
072:[DOT] .
072:[ID] cons
072:[LPAREN] (
072:[ID] s
072:[RPAREN] )
072:[SEMICOLON] ;
073:[ID] self
073:[SEMICOLON] ;
074:[RBRACE] }
075:[RBRACE] }
075:[SEMICOLON] ;
077:[ID] print
077:[LPAREN] (
077:[RPAREN] )
077:[COLON] :
077:[TYPE] Object
077:[LBRACE] {
078:[LBRACE] {
079:[ID] out_int
079:[LPAREN] (
079:[ID] num
079:[RPAREN] )
079:[SEMICOLON] ;
080:[ID] out
080:[DOT] .
080:[ID] print
080:[LPAREN] (
080:[RPAREN] )
080:[SEMICOLON] ;
081:[RBRACE] }
082:[RBRACE] }
082:[SEMICOLON] ;
084:[RBRACE] }
084:[SEMICOLON] ;
086:[CLASS] class
086:[TYPE] Edge
086:[INHERITS] inherits
086:[TYPE] IO
086:[LBRACE] {
088:[ID] from
088:[COLON] :
088:[TYPE] Int
088:[SEMICOLON] ;
089:[ID] to
089:[COLON] :
089:[TYPE] Int
089:[SEMICOLON] ;
090:[ID] weight
090:[COLON] :
090:[TYPE] Int
090:[SEMICOLON] ;
092:[ID] init
092:[LPAREN] (
092:[ID] f
092:[COLON] :
092:[TYPE] Int
092:[COMMA] ,
092:[ID] t
092:[COLON] :
092:[TYPE] Int
092:[COMMA] ,
092:[ID] w
092:[COLON] :
092:[TYPE] Int
092:[RPAREN] )
092:[COLON] :
092:[TYPE] SELF_TYPE
092:[LBRACE] {
093:[LBRACE] {
094:[ID] from
094:[ASSIGN] <-
094:[ID] f
094:[SEMICOLON] ;
095:[ID] to
095:[ASSIGN] <-
095:[ID] t
095:[SEMICOLON] ;
096:[ID] weight
096:[ASSIGN] <-
096:[ID] w
096:[SEMICOLON] ;
097:[ID] self
097:[SEMICOLON] ;
098:[RBRACE] }
099:[RBRACE] }
099:[SEMICOLON] ;
101:[ID] print
101:[LPAREN] (
101:[RPAREN] )
101:[COLON] :
101:[TYPE] Object
101:[LBRACE] {
102:[LBRACE] {
103:[ID] out_string
103:[LPAREN] (
103:[STRING] " ("
103:[RPAREN] )
103:[SEMICOLON] ;
104:[ID] out_int
104:[LPAREN] (
104:[ID] from
104:[RPAREN] )
104:[SEMICOLON] ;
105:[ID] out_string
105:[LPAREN] (
105:[STRING] ","
105:[RPAREN] )
105:[SEMICOLON] ;
106:[ID] out_int
106:[LPAREN] (
106:[ID] to
106:[RPAREN] )
106:[SEMICOLON] ;
107:[ID] out_string
107:[LPAREN] (
107:[STRING] ")"
107:[RPAREN] )
107:[SEMICOLON] ;
108:[ID] out_int
108:[LPAREN] (
108:[ID] weight
108:[RPAREN] )
108:[SEMICOLON] ;
109:[RBRACE] }
110:[RBRACE] }
110:[SEMICOLON] ;
112:[RBRACE] }
112:[SEMICOLON] ;
116:[CLASS] class
116:[TYPE] EList
116:[INHERITS] inherits
116:[TYPE] IO
116:[LBRACE] {
119:[ID] car
119:[COLON] :
119:[TYPE] Edge
119:[SEMICOLON] ;
121:[ID] isNil
121:[LPAREN] (
121:[RPAREN] )
121:[COLON] :
121:[TYPE] Bool
121:[LBRACE] {
121:[TRUE] true
121:[RBRACE] }
121:[SEMICOLON] ;
123:[ID] head
123:[LPAREN] (
123:[RPAREN] )
123:[COLON] :
123:[TYPE] Edge
123:[LBRACE] {
123:[LBRACE] {
123:[ID] abort
123:[LPAREN] (
123:[RPAREN] )
123:[SEMICOLON] ;
123:[ID] car
123:[SEMICOLON] ;
123:[RBRACE] }
123:[RBRACE] }
123:[SEMICOLON] ;
125:[ID] tail
125:[LPAREN] (
125:[RPAREN] )
125:[COLON] :
125:[TYPE] EList
125:[LBRACE] {
125:[LBRACE] {
125:[ID] abort
125:[LPAREN] (
125:[RPAREN] )
125:[SEMICOLON] ;
125:[ID] self
125:[SEMICOLON] ;
125:[RBRACE] }
125:[RBRACE] }
125:[SEMICOLON] ;
134:[ID] cons
134:[LPAREN] (
134:[ID] e
134:[COLON] :
134:[TYPE] Edge
134:[RPAREN] )
134:[COLON] :
134:[TYPE] EList
134:[LBRACE] {
135:[LPAREN] (
135:[NEW] new
135:[TYPE] ECons
135:[RPAREN] )
135:[DOT] .
135:[ID] init
135:[LPAREN] (
135:[ID] e
135:[COMMA] ,
135:[ID] self
135:[RPAREN] )
136:[RBRACE] }
136:[SEMICOLON] ;
138:[ID] append
138:[LPAREN] (
138:[ID] l
138:[COLON] :
138:[TYPE] EList
138:[RPAREN] )
138:[COLON] :
138:[TYPE] EList
138:[LBRACE] {
139:[IF] if
139:[ID] self
139:[DOT] .
139:[ID] isNil
139:[LPAREN] (
139:[RPAREN] )
139:[THEN] then
139:[ID] l
140:[ELSE] else
140:[ID] tail
140:[LPAREN] (
140:[RPAREN] )
140:[DOT] .
140:[ID] append
140:[LPAREN] (
140:[ID] l
140:[RPAREN] )
140:[DOT] .
140:[ID] cons
140:[LPAREN] (
140:[ID] head
140:[LPAREN] (
140:[RPAREN] )
140:[RPAREN] )
141:[FI] fi
142:[RBRACE] }
142:[SEMICOLON] ;
144:[ID] print
144:[LPAREN] (
144:[RPAREN] )
144:[COLON] :
144:[TYPE] Object
144:[LBRACE] {
145:[ID] out_string
145:[LPAREN] (
145:[STRING] "\n"
145:[RPAREN] )
146:[RBRACE] }
146:[SEMICOLON] ;
148:[RBRACE] }
148:[SEMICOLON] ;
164:[CLASS] class
164:[TYPE] ECons
164:[INHERITS] inherits
164:[TYPE] EList
164:[LBRACE] {
166:[ID] cdr
166:[COLON] :
166:[TYPE] EList
166:[SEMICOLON] ;
168:[ID] isNil
168:[LPAREN] (
168:[RPAREN] )
168:[COLON] :
168:[TYPE] Bool
168:[LBRACE] {
168:[FALSE] false
168:[RBRACE] }
168:[SEMICOLON] ;
170:[ID] head
170:[LPAREN] (
170:[RPAREN] )
170:[COLON] :
170:[TYPE] Edge
170:[LBRACE] {
170:[ID] car
170:[RBRACE] }
170:[SEMICOLON] ;
172:[ID] tail
172:[LPAREN] (
172:[RPAREN] )
172:[COLON] :
172:[TYPE] EList
172:[LBRACE] {
172:[ID] cdr
172:[RBRACE] }
172:[SEMICOLON] ;
174:[ID] init
174:[LPAREN] (
174:[ID] e
174:[COLON] :
174:[TYPE] Edge
174:[COMMA] ,
174:[ID] rest
174:[COLON] :
174:[TYPE] EList
174:[RPAREN] )
174:[COLON] :
174:[TYPE] EList
174:[LBRACE] {
175:[LBRACE] {
176:[ID] car
176:[ASSIGN] <-
176:[ID] e
176:[SEMICOLON] ;
177:[ID] cdr
177:[ASSIGN] <-
177:[ID] rest
177:[SEMICOLON] ;
178:[ID] self
178:[SEMICOLON] ;
179:[RBRACE] }
180:[RBRACE] }
180:[SEMICOLON] ;
182:[ID] print
182:[LPAREN] (
182:[RPAREN] )
182:[COLON] :
182:[TYPE] Object
182:[LBRACE] {
183:[LBRACE] {
184:[ID] car
184:[DOT] .
184:[ID] print
184:[LPAREN] (
184:[RPAREN] )
184:[SEMICOLON] ;
185:[ID] cdr
185:[DOT] .
185:[ID] print
185:[LPAREN] (
185:[RPAREN] )
185:[SEMICOLON] ;
186:[RBRACE] }
187:[RBRACE] }
187:[SEMICOLON] ;
189:[RBRACE] }
189:[SEMICOLON] ;
194:[CLASS] class
194:[TYPE] VList
194:[INHERITS] inherits
194:[TYPE] IO
194:[LBRACE] {
197:[ID] car
197:[COLON] :
197:[TYPE] Vertice
197:[SEMICOLON] ;
199:[ID] isNil
199:[LPAREN] (
199:[RPAREN] )
199:[COLON] :
199:[TYPE] Bool
199:[LBRACE] {
199:[TRUE] true
199:[RBRACE] }
199:[SEMICOLON] ;
201:[ID] head
201:[LPAREN] (
201:[RPAREN] )
201:[COLON] :
201:[TYPE] Vertice
201:[LBRACE] {
201:[LBRACE] {
201:[ID] abort
201:[LPAREN] (
201:[RPAREN] )
201:[SEMICOLON] ;
201:[ID] car
201:[SEMICOLON] ;
201:[RBRACE] }
201:[RBRACE] }
201:[SEMICOLON] ;
203:[ID] tail
203:[LPAREN] (
203:[RPAREN] )
203:[COLON] :
203:[TYPE] VList
203:[LBRACE] {
203:[LBRACE] {
203:[ID] abort
203:[LPAREN] (
203:[RPAREN] )
203:[SEMICOLON] ;
203:[ID] self
203:[SEMICOLON] ;
203:[RBRACE] }
203:[RBRACE] }
203:[SEMICOLON] ;
212:[ID] cons
212:[LPAREN] (
212:[ID] v
212:[COLON] :
212:[TYPE] Vertice
212:[RPAREN] )
212:[COLON] :
212:[TYPE] VList
212:[LBRACE] {
213:[LPAREN] (
213:[NEW] new
213:[TYPE] VCons
213:[RPAREN] )
213:[DOT] .
213:[ID] init
213:[LPAREN] (
213:[ID] v
213:[COMMA] ,
213:[ID] self
213:[RPAREN] )
214:[RBRACE] }
214:[SEMICOLON] ;
216:[ID] print
216:[LPAREN] (
216:[RPAREN] )
216:[COLON] :
216:[TYPE] Object
216:[LBRACE] {
216:[ID] out_string
216:[LPAREN] (
216:[STRING] "\n"
216:[RPAREN] )
216:[RBRACE] }
216:[SEMICOLON] ;
218:[RBRACE] }
218:[SEMICOLON] ;
221:[CLASS] class
221:[TYPE] VCons
221:[INHERITS] inherits
221:[TYPE] VList
221:[LBRACE] {
223:[ID] cdr
223:[COLON] :
223:[TYPE] VList
223:[SEMICOLON] ;
225:[ID] isNil
225:[LPAREN] (
225:[RPAREN] )
225:[COLON] :
225:[TYPE] Bool
225:[LBRACE] {
225:[FALSE] false
225:[RBRACE] }
225:[SEMICOLON] ;
227:[ID] head
227:[LPAREN] (
227:[RPAREN] )
227:[COLON] :
227:[TYPE] Vertice
227:[LBRACE] {
227:[ID] car
227:[RBRACE] }
227:[SEMICOLON] ;
229:[ID] tail
229:[LPAREN] (
229:[RPAREN] )
229:[COLON] :
229:[TYPE] VList
229:[LBRACE] {
229:[ID] cdr
229:[RBRACE] }
229:[SEMICOLON] ;
231:[ID] init
231:[LPAREN] (
231:[ID] v
231:[COLON] :
231:[TYPE] Vertice
231:[COMMA] ,
231:[ID] rest
231:[COLON] :
231:[TYPE] VList
231:[RPAREN] )
231:[COLON] :
231:[TYPE] VList
231:[LBRACE] {
232:[LBRACE] {
233:[ID] car
233:[ASSIGN] <-
233:[ID] v
233:[SEMICOLON] ;
234:[ID] cdr
234:[ASSIGN] <-
234:[ID] rest
234:[SEMICOLON] ;
235:[ID] self
235:[SEMICOLON] ;
236:[RBRACE] }
237:[RBRACE] }
237:[SEMICOLON] ;
239:[ID] print
239:[LPAREN] (
239:[RPAREN] )
239:[COLON] :
239:[TYPE] Object
239:[LBRACE] {
240:[LBRACE] {
241:[ID] car
241:[DOT] .
241:[ID] print
241:[LPAREN] (
241:[RPAREN] )
241:[SEMICOLON] ;
242:[ID] cdr
242:[DOT] .
242:[ID] print
242:[LPAREN] (
242:[RPAREN] )
242:[SEMICOLON] ;
243:[RBRACE] }
244:[RBRACE] }
244:[SEMICOLON] ;
246:[RBRACE] }
246:[SEMICOLON] ;
249:[CLASS] class
249:[TYPE] Parse
249:[INHERITS] inherits
249:[TYPE] IO
249:[LBRACE] {
252:[ID] boolop
252:[COLON] :
252:[TYPE] BoolOp
252:[ASSIGN] <-
252:[NEW] new
252:[TYPE] BoolOp
252:[SEMICOLON] ;
256:[ID] read_input
256:[LPAREN] (
256:[RPAREN] )
256:[COLON] :
256:[TYPE] Graph
256:[LBRACE] {
258:[LPAREN] (
258:[LET] let
258:[ID] g
258:[COLON] :
258:[TYPE] Graph
258:[ASSIGN] <-
258:[NEW] new
258:[TYPE] Graph
258:[IN] in
258:[LBRACE] {
259:[LPAREN] (
259:[LET] let
259:[ID] line
259:[COLON] :
259:[TYPE] String
259:[ASSIGN] <-
259:[ID] in_string
259:[LPAREN] (
259:[RPAREN] )
259:[IN] in
260:[WHILE] while
260:[LPAREN] (
260:[ID] boolop
260:[DOT] .
260:[ID] and
260:[LPAREN] (
260:[NOT] not
260:[ID] line
260:[EQUAL] =
260:[STRING] "\n"
260:[COMMA] ,
260:[NOT] not
260:[ID] line
260:[EQUAL] =
260:[STRING] ""
260:[RPAREN] )
260:[RPAREN] )
260:[LOOP] loop
260:[LBRACE] {
263:[ID] g
263:[DOT] .
263:[ID] add_vertice
263:[LPAREN] (
263:[ID] parse_line
263:[LPAREN] (
263:[ID] line
263:[RPAREN] )
263:[RPAREN] )
263:[SEMICOLON] ;
264:[ID] line
264:[ASSIGN] <-
264:[ID] in_string
264:[LPAREN] (
264:[RPAREN] )
264:[SEMICOLON] ;
265:[RBRACE] }
265:[POOL] pool
266:[RPAREN] )
266:[SEMICOLON] ;
267:[ID] g
267:[SEMICOLON] ;
268:[RBRACE] }
268:[RPAREN] )
269:[RBRACE] }
269:[SEMICOLON] ;
272:[ID] parse_line
272:[LPAREN] (
272:[ID] s
272:[COLON] :
272:[TYPE] String
272:[RPAREN] )
272:[COLON] :
272:[TYPE] Vertice
272:[LBRACE] {
273:[LPAREN] (
273:[LET] let
273:[ID] v
273:[COLON] :
273:[TYPE] Vertice
273:[ASSIGN] <-
273:[LPAREN] (
273:[NEW] new
273:[TYPE] Vertice
273:[RPAREN] )
273:[DOT] .
273:[ID] init
273:[LPAREN] (
273:[ID] a2i
273:[LPAREN] (
273:[ID] s
273:[RPAREN] )
273:[RPAREN] )
273:[IN] in
273:[LBRACE] {
274:[WHILE] while
274:[LPAREN] (
274:[NOT] not
274:[ID] rest
274:[DOT] .
274:[ID] length
274:[LPAREN] (
274:[RPAREN] )
274:[EQUAL] =
274:[INTEGER] 0
274:[RPAREN] )
274:[LOOP] loop
274:[LBRACE] {
277:[LPAREN] (
277:[LET] let
277:[ID] succ
277:[COLON] :
277:[TYPE] Int
277:[ASSIGN] <-
277:[ID] a2i
277:[LPAREN] (
277:[ID] rest
277:[RPAREN] )
277:[IN] in
277:[LPAREN] (
277:[LET] let
278:[ID] weight
278:[COLON] :
278:[TYPE] Int
278:[ASSIGN] <-
278:[ID] a2i
278:[LPAREN] (
278:[ID] rest
278:[RPAREN] )
279:[IN] in
280:[ID] v
280:[DOT] .
280:[ID] add_out
280:[LPAREN] (
280:[NEW] new
280:[TYPE] Edge
280:[DOT] .
280:[ID] init
280:[LPAREN] (
280:[ID] v
280:[DOT] .
280:[ID] number
280:[LPAREN] (
280:[RPAREN] )
280:[COMMA] ,
281:[ID] succ
281:[COMMA] ,
282:[ID] weight
282:[RPAREN] )
282:[RPAREN] )
283:[RPAREN] )
283:[RPAREN] )
283:[SEMICOLON] ;
284:[RBRACE] }
284:[POOL] pool
284:[SEMICOLON] ;
285:[ID] v
285:[SEMICOLON] ;
286:[RBRACE] }
287:[RPAREN] )
288:[RBRACE] }
288:[SEMICOLON] ;
290:[ID] c2i
290:[LPAREN] (
290:[ID] char
290:[COLON] :
290:[TYPE] String
290:[RPAREN] )
290:[COLON] :
290:[TYPE] Int
290:[LBRACE] {
291:[IF] if
291:[ID] char
291:[EQUAL] =
291:[STRING] "0"
291:[THEN] then
291:[INTEGER] 0
291:[ELSE] else
292:[IF] if
292:[ID] char
292:[EQUAL] =
292:[STRING] "1"
292:[THEN] then
292:[INTEGER] 1
292:[ELSE] else
293:[IF] if
293:[ID] char
293:[EQUAL] =
293:[STRING] "2"
293:[THEN] then
293:[INTEGER] 2
293:[ELSE] else
294:[IF] if
294:[ID] char
294:[EQUAL] =
294:[STRING] "3"
294:[THEN] then
294:[INTEGER] 3
294:[ELSE] else
295:[IF] if
295:[ID] char
295:[EQUAL] =
295:[STRING] "4"
295:[THEN] then
295:[INTEGER] 4
295:[ELSE] else
296:[IF] if
296:[ID] char
296:[EQUAL] =
296:[STRING] "5"
296:[THEN] then
296:[INTEGER] 5
296:[ELSE] else
297:[IF] if
297:[ID] char
297:[EQUAL] =
297:[STRING] "6"
297:[THEN] then
297:[INTEGER] 6
297:[ELSE] else
298:[IF] if
298:[ID] char
298:[EQUAL] =
298:[STRING] "7"
298:[THEN] then
298:[INTEGER] 7
298:[ELSE] else
299:[IF] if
299:[ID] char
299:[EQUAL] =
299:[STRING] "8"
299:[THEN] then
299:[INTEGER] 8
299:[ELSE] else
300:[IF] if
300:[ID] char
300:[EQUAL] =
300:[STRING] "9"
300:[THEN] then
300:[INTEGER] 9
300:[ELSE] else
301:[LBRACE] {
301:[ID] abort
301:[LPAREN] (
301:[RPAREN] )
301:[SEMICOLON] ;
301:[INTEGER] 0
301:[SEMICOLON] ;
301:[RBRACE] }
302:[FI] fi
302:[FI] fi
302:[FI] fi
302:[FI] fi
302:[FI] fi
302:[FI] fi
302:[FI] fi
302:[FI] fi
302:[FI] fi
302:[FI] fi
303:[RBRACE] }
303:[SEMICOLON] ;
305:[ID] rest
305:[COLON] :
305:[TYPE] String
305:[SEMICOLON] ;
307:[ID] a2i
307:[LPAREN] (
307:[ID] s
307:[COLON] :
307:[TYPE] String
307:[RPAREN] )
307:[COLON] :
307:[TYPE] Int
307:[LBRACE] {
308:[IF] if
308:[ID] s
308:[DOT] .
308:[ID] length
308:[LPAREN] (
308:[RPAREN] )
308:[EQUAL] =
308:[INTEGER] 0
308:[THEN] then
308:[INTEGER] 0
308:[ELSE] else
309:[IF] if
309:[ID] s
309:[DOT] .
309:[ID] substr
309:[LPAREN] (
309:[INTEGER] 0
309:[COMMA] ,
309:[INTEGER] 1
309:[RPAREN] )
309:[EQUAL] =
309:[STRING] "-"
309:[THEN] then
309:[NEG] ~
309:[ID] a2i_aux
309:[LPAREN] (
309:[ID] s
309:[DOT] .
309:[ID] substr
309:[LPAREN] (
309:[INTEGER] 1
309:[COMMA] ,
309:[ID] s
309:[DOT] .
309:[ID] length
309:[LPAREN] (
309:[RPAREN] )
309:[MINUS] -
309:[INTEGER] 1
309:[RPAREN] )
309:[RPAREN] )
309:[ELSE] else
310:[IF] if
310:[ID] s
310:[DOT] .
310:[ID] substr
310:[LPAREN] (
310:[INTEGER] 0
310:[COMMA] ,
310:[INTEGER] 1
310:[RPAREN] )
310:[EQUAL] =
310:[STRING] " "
310:[THEN] then
310:[ID] a2i
310:[LPAREN] (
310:[ID] s
310:[DOT] .
310:[ID] substr
310:[LPAREN] (
310:[INTEGER] 1
310:[COMMA] ,
310:[ID] s
310:[DOT] .
310:[ID] length
310:[LPAREN] (
310:[RPAREN] )
310:[MINUS] -
310:[INTEGER] 1
310:[RPAREN] )
310:[RPAREN] )
310:[ELSE] else
311:[ID] a2i_aux
311:[LPAREN] (
311:[ID] s
311:[RPAREN] )
312:[FI] fi
312:[FI] fi
312:[FI] fi
313:[RBRACE] }
313:[SEMICOLON] ;
321:[ID] a2i_aux
321:[LPAREN] (
321:[ID] s
321:[COLON] :
321:[TYPE] String
321:[RPAREN] )
321:[COLON] :
321:[TYPE] Int
321:[LBRACE] {
322:[LPAREN] (
322:[LET] let
322:[ID] int
322:[COLON] :
322:[TYPE] Int
322:[ASSIGN] <-
322:[INTEGER] 0
322:[IN] in
323:[LBRACE] {
324:[LPAREN] (
324:[LET] let
324:[ID] j
324:[COLON] :
324:[TYPE] Int
324:[ASSIGN] <-
324:[ID] s
324:[DOT] .
324:[ID] length
324:[LPAREN] (
324:[RPAREN] )
324:[IN] in
325:[LPAREN] (
325:[LET] let
325:[ID] i
325:[COLON] :
325:[TYPE] Int
325:[ASSIGN] <-
325:[INTEGER] 0
325:[IN] in
326:[WHILE] while
326:[ID] i
326:[LT] <
326:[ID] j
326:[LOOP] loop
327:[LPAREN] (
327:[LET] let
327:[ID] c
327:[COLON] :
327:[TYPE] String
327:[ASSIGN] <-
327:[ID] s
327:[DOT] .
327:[ID] substr
327:[LPAREN] (
327:[ID] i
327:[COMMA] ,
327:[INTEGER] 1
327:[RPAREN] )
327:[IN] in
328:[IF] if
328:[LPAREN] (
328:[ID] c
328:[EQUAL] =
328:[STRING] " "
328:[RPAREN] )
328:[THEN] then
329:[LBRACE] {
330:[ID] rest
330:[ASSIGN] <-
330:[ID] s
330:[DOT] .
330:[ID] substr
330:[LPAREN] (
330:[ID] i
330:[PLUS] +
330:[INTEGER] 1
330:[COMMA] ,
330:[ID] s
330:[DOT] .
330:[ID] length
330:[LPAREN] (
330:[RPAREN] )
330:[MINUS] -
330:[ID] i
330:[MINUS] -
330:[INTEGER] 1
330:[RPAREN] )
330:[SEMICOLON] ;
331:[ID] i
331:[ASSIGN] <-
331:[ID] j
331:[SEMICOLON] ;
332:[RBRACE] }
333:[ELSE] else
333:[IF] if
333:[LPAREN] (
333:[ID] c
333:[EQUAL] =
333:[STRING] ","
333:[RPAREN] )
333:[THEN] then
334:[LBRACE] {
335:[ID] rest
335:[ASSIGN] <-
335:[ID] s
335:[DOT] .
335:[ID] substr
335:[LPAREN] (
335:[ID] i
335:[PLUS] +
335:[INTEGER] 1
335:[COMMA] ,
335:[ID] s
335:[DOT] .
335:[ID] length
335:[LPAREN] (
335:[RPAREN] )
335:[MINUS] -
335:[ID] i
335:[MINUS] -
335:[INTEGER] 1
335:[RPAREN] )
335:[SEMICOLON] ;
336:[ID] i
336:[ASSIGN] <-
336:[ID] j
336:[SEMICOLON] ;
337:[RBRACE] }
338:[ELSE] else
339:[LBRACE] {
340:[ID] int
340:[ASSIGN] <-
340:[ID] int
340:[MUL] *
340:[INTEGER] 10
340:[PLUS] +
340:[ID] c2i
340:[LPAREN] (
340:[ID] s
340:[DOT] .
340:[ID] substr
340:[LPAREN] (
340:[ID] i
340:[COMMA] ,
340:[INTEGER] 1
340:[RPAREN] )
340:[RPAREN] )
340:[SEMICOLON] ;
341:[ID] i
341:[ASSIGN] <-
341:[ID] i
341:[PLUS] +
341:[INTEGER] 1
341:[SEMICOLON] ;
342:[IF] if
342:[ID] i
342:[EQUAL] =
342:[ID] j
342:[THEN] then
342:[ID] rest
342:[ASSIGN] <-
342:[STRING] ""
342:[ELSE] else
342:[STRING] ""
342:[FI] fi
342:[SEMICOLON] ;
343:[RBRACE] }
344:[FI] fi
344:[FI] fi
345:[RPAREN] )
346:[POOL] pool
347:[RPAREN] )
348:[RPAREN] )
348:[SEMICOLON] ;
349:[ID] int
349:[SEMICOLON] ;
350:[RBRACE] }
351:[RPAREN] )
352:[RBRACE] }
352:[SEMICOLON] ;
354:[RBRACE] }
354:[SEMICOLON] ;
357:[CLASS] class
357:[TYPE] Main
357:[INHERITS] inherits
357:[TYPE] Parse
357:[LBRACE] {
359:[ID] g
359:[COLON] :
359:[TYPE] Graph
359:[ASSIGN] <-
359:[ID] read_input
359:[LPAREN] (
359:[RPAREN] )
359:[SEMICOLON] ;
361:[ID] main
361:[LPAREN] (
361:[RPAREN] )
361:[COLON] :
361:[TYPE] Object
361:[LBRACE] {
362:[LBRACE] {
363:[ID] g
363:[DOT] .
363:[ID] print_V
363:[LPAREN] (
363:[RPAREN] )
363:[SEMICOLON] ;
364:[ID] g
364:[DOT] .
364:[ID] print_E
364:[LPAREN] (
364:[RPAREN] )
364:[SEMICOLON] ;
365:[RBRACE] }
366:[RBRACE] }
366:[SEMICOLON] ;
368:[RBRACE] }
368:[SEMICOLON] ;
370:[CLASS] class
370:[TYPE] BoolOp
370:[LBRACE] {
372:[ID] and
372:[LPAREN] (
372:[ID] b1
372:[COLON] :
372:[TYPE] Bool
372:[COMMA] ,
372:[ID] b2
372:[COLON] :
372:[TYPE] Bool
372:[RPAREN] )
372:[COLON] :
372:[TYPE] Bool
372:[LBRACE] {
373:[IF] if
373:[ID] b1
373:[THEN] then
373:[ID] b2
373:[ELSE] else
373:[FALSE] false
373:[FI] fi
374:[RBRACE] }
374:[SEMICOLON] ;
377:[ID] or
377:[LPAREN] (
377:[ID] b1
377:[COLON] :
377:[TYPE] Bool
377:[COMMA] ,
377:[ID] b2
377:[COLON] :
377:[TYPE] Bool
377:[RPAREN] )
377:[COLON] :
377:[TYPE] Bool
377:[LBRACE] {
378:[IF] if
378:[ID] b1
378:[THEN] then
378:[TRUE] true
378:[ELSE] else
378:[ID] b2
378:[FI] fi
379:[RBRACE] }
379:[SEMICOLON] ;
381:[RBRACE] }
381:[SEMICOLON] ;
