026:[CLASS] class
026:[TYPE] List
026:[LBRACE] {
029:[ID] isNil
029:[LPAREN] (
029:[RPAREN] )
029:[COLON] :
029:[TYPE] Bool
029:[LBRACE] {
029:[TRUE] true
029:[RBRACE] }
029:[SEMICOLON] ;
035:[ID] head
035:[LPAREN] (
035:[RPAREN] )
035:[COLON] :
035:[TYPE] Int
035:[LBRACE] {
035:[LBRACE] {
035:[ID] abort
035:[LPAREN] (
035:[RPAREN] )
035:[SEMICOLON] ;
035:[INTEGER] 0
035:[SEMICOLON] ;
035:[RBRACE] }
035:[RBRACE] }
035:[SEMICOLON] ;
040:[ID] tail
040:[LPAREN] (
040:[RPAREN] )
040:[COLON] :
040:[TYPE] List
040:[LBRACE] {
040:[LBRACE] {
040:[ID] abort
040:[LPAREN] (
040:[RPAREN] )
040:[SEMICOLON] ;
040:[ID] self
040:[SEMICOLON] ;
040:[RBRACE] }
040:[RBRACE] }
040:[SEMICOLON] ;
049:[ID] cons
049:[LPAREN] (
049:[ID] i
049:[COLON] :
049:[TYPE] Int
049:[RPAREN] )
049:[COLON] :
049:[TYPE] List
049:[LBRACE] {
050:[LPAREN] (
050:[NEW] new
050:[TYPE] Cons
050:[RPAREN] )
050:[DOT] .
050:[ID] init
050:[LPAREN] (
050:[ID] i
050:[COMMA] ,
050:[ID] self
050:[RPAREN] )
051:[RBRACE] }
051:[SEMICOLON] ;
053:[RBRACE] }
053:[SEMICOLON] ;
070:[CLASS] class
070:[TYPE] Cons
070:[INHERITS] inherits
070:[TYPE] List
070:[LBRACE] {
072:[ID] car
072:[COLON] :
072:[TYPE] Int
072:[SEMICOLON] ;
074:[ID] cdr
074:[COLON] :
074:[TYPE] List
074:[SEMICOLON] ;
076:[ID] isNil
076:[LPAREN] (
076:[RPAREN] )
076:[COLON] :
076:[TYPE] Bool
076:[LBRACE] {
076:[FALSE] false
076:[RBRACE] }
076:[SEMICOLON] ;
078:[ID] head
078:[LPAREN] (
078:[RPAREN] )
078:[COLON] :
078:[TYPE] Int
078:[LBRACE] {
078:[ID] car
078:[RBRACE] }
078:[SEMICOLON] ;
080:[ID] tail
080:[LPAREN] (
080:[RPAREN] )
080:[COLON] :
080:[TYPE] List
080:[LBRACE] {
080:[ID] cdr
080:[RBRACE] }
080:[SEMICOLON] ;
082:[ID] init
082:[LPAREN] (
082:[ID] i
082:[COLON] :
082:[TYPE] Int
082:[COMMA] ,
082:[ID] rest
082:[COLON] :
082:[TYPE] List
082:[RPAREN] )
082:[COLON] :
082:[TYPE] List
082:[LBRACE] {
083:[LBRACE] {
084:[ID] car
084:[ASSIGN] <-
084:[ID] i
084:[SEMICOLON] ;
085:[ID] cdr
085:[ASSIGN] <-
085:[ID] rest
085:[SEMICOLON] ;
086:[ID] self
086:[SEMICOLON] ;
087:[RBRACE] }
088:[RBRACE] }
088:[SEMICOLON] ;
090:[RBRACE] }
090:[SEMICOLON] ;
100:[CLASS] class
100:[TYPE] Main
100:[INHERITS] inherits
100:[TYPE] IO
100:[LBRACE] {
102:[ID] mylist
102:[COLON] :
102:[TYPE] List
102:[SEMICOLON] ;
107:[ID] print_list
107:[LPAREN] (
107:[ID] l
107:[COLON] :
107:[TYPE] List
107:[RPAREN] )
107:[COLON] :
107:[TYPE] Object
107:[LBRACE] {
108:[IF] if
108:[ID] l
108:[DOT] .
108:[ID] isNil
108:[LPAREN] (
108:[RPAREN] )
108:[THEN] then
108:[ID] out_string
108:[LPAREN] (
108:[STRING] "\n"
108:[RPAREN] )
109:[ELSE] else
109:[LBRACE] {
110:[ID] out_int
110:[LPAREN] (
110:[ID] l
110:[DOT] .
110:[ID] head
110:[LPAREN] (
110:[RPAREN] )
110:[RPAREN] )
110:[SEMICOLON] ;
111:[ID] out_string
111:[LPAREN] (
111:[STRING] " "
111:[RPAREN] )
111:[SEMICOLON] ;
112:[ID] print_list
112:[LPAREN] (
112:[ID] l
112:[DOT] .
112:[ID] tail
112:[LPAREN] (
112:[RPAREN] )
112:[RPAREN] )
112:[SEMICOLON] ;
113:[RBRACE] }
114:[FI] fi
115:[RBRACE] }
115:[SEMICOLON] ;
126:[ID] main
126:[LPAREN] (
126:[RPAREN] )
126:[COLON] :
126:[TYPE] Object
126:[LBRACE] {
127:[LBRACE] {
128:[ID] mylist
128:[ASSIGN] <-
128:[NEW] new
128:[TYPE] List
128:[DOT] .
128:[ID] cons
128:[LPAREN] (
128:[INTEGER] 1
128:[RPAREN] )
128:[DOT] .
128:[ID] cons
128:[LPAREN] (
128:[INTEGER] 2
128:[RPAREN] )
128:[DOT] .
128:[ID] cons
128:[LPAREN] (
128:[INTEGER] 3
128:[RPAREN] )
128:[DOT] .
128:[ID] cons
128:[LPAREN] (
128:[INTEGER] 4
128:[RPAREN] )
128:[DOT] .
128:[ID] cons
128:[LPAREN] (
128:[INTEGER] 5
128:[RPAREN] )
128:[SEMICOLON] ;
129:[WHILE] while
129:[LPAREN] (
129:[NOT] not
129:[ID] mylist
129:[DOT] .
129:[ID] isNil
129:[LPAREN] (
129:[RPAREN] )
129:[RPAREN] )
129:[LOOP] loop
130:[LBRACE] {
131:[ID] print_list
131:[LPAREN] (
131:[ID] mylist
131:[RPAREN] )
131:[SEMICOLON] ;
132:[ID] mylist
132:[ASSIGN] <-
132:[ID] mylist
132:[DOT] .
132:[ID] tail
132:[LPAREN] (
132:[RPAREN] )
132:[SEMICOLON] ;
133:[RBRACE] }
134:[POOL] pool
134:[SEMICOLON] ;
135:[RBRACE] }
136:[RBRACE] }
136:[SEMICOLON] ;
138:[RBRACE] }
138:[SEMICOLON] ;
