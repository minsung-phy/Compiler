001:[CLASS] class
001:[TYPE] Main
001:[INHERITS] inherits
001:[TYPE] IO
001:[LBRACE] {
002:[ID] main
002:[LPAREN] (
002:[RPAREN] )
002:[COLON] :
002:[TYPE] SELF_TYPE
002:[LBRACE] {
003:[LPAREN] (
003:[LET] let
003:[ID] c
003:[COLON] :
003:[TYPE] Complex
003:[ASSIGN] <-
003:[LPAREN] (
003:[NEW] new
003:[TYPE] Complex
003:[RPAREN] )
003:[DOT] .
003:[ID] init
003:[LPAREN] (
003:[INTEGER] 1
003:[COMMA] ,
003:[INTEGER] 1
003:[RPAREN] )
003:[IN] in
004:[IF] if
004:[ID] c
004:[DOT] .
004:[ID] reflect_X
004:[LPAREN] (
004:[RPAREN] )
004:[DOT] .
004:[ID] reflect_Y
004:[LPAREN] (
004:[RPAREN] )
004:[EQUAL] =
004:[ID] c
004:[DOT] .
004:[ID] reflect_0
004:[LPAREN] (
004:[RPAREN] )
005:[THEN] then
005:[ID] out_string
005:[LPAREN] (
005:[STRING] "=)\n"
005:[RPAREN] )
006:[ELSE] else
006:[ID] out_string
006:[LPAREN] (
006:[STRING] "=(\n"
006:[RPAREN] )
007:[FI] fi
008:[RPAREN] )
009:[RBRACE] }
009:[SEMICOLON] ;
010:[RBRACE] }
010:[SEMICOLON] ;
012:[CLASS] class
012:[TYPE] Complex
012:[INHERITS] inherits
012:[TYPE] IO
012:[LBRACE] {
013:[ID] x
013:[COLON] :
013:[TYPE] Int
013:[SEMICOLON] ;
014:[ID] y
014:[COLON] :
014:[TYPE] Int
014:[SEMICOLON] ;
016:[ID] init
016:[LPAREN] (
016:[ID] a
016:[COLON] :
016:[TYPE] Int
016:[COMMA] ,
016:[ID] b
016:[COLON] :
016:[TYPE] Int
016:[RPAREN] )
016:[COLON] :
016:[TYPE] Complex
016:[LBRACE] {
017:[LBRACE] {
018:[ID] x
018:[EQUAL] =
018:[ID] a
018:[SEMICOLON] ;
019:[ID] y
019:[EQUAL] =
019:[ID] b
019:[SEMICOLON] ;
020:[ID] self
020:[SEMICOLON] ;
021:[RBRACE] }
022:[RBRACE] }
022:[SEMICOLON] ;
024:[ID] print
024:[LPAREN] (
024:[RPAREN] )
024:[COLON] :
024:[TYPE] Object
024:[LBRACE] {
025:[IF] if
025:[ID] y
025:[EQUAL] =
025:[INTEGER] 0
026:[THEN] then
026:[ID] out_int
026:[LPAREN] (
026:[ID] x
026:[RPAREN] )
027:[ELSE] else
027:[ID] out_int
027:[LPAREN] (
027:[ID] x
027:[RPAREN] )
027:[DOT] .
027:[ID] out_string
027:[LPAREN] (
027:[STRING] "+"
027:[RPAREN] )
027:[DOT] .
027:[ID] out_int
027:[LPAREN] (
027:[ID] y
027:[RPAREN] )
027:[DOT] .
027:[ID] out_string
027:[LPAREN] (
027:[STRING] "I"
027:[RPAREN] )
028:[FI] fi
029:[RBRACE] }
029:[SEMICOLON] ;
031:[ID] reflect_0
031:[LPAREN] (
031:[RPAREN] )
031:[COLON] :
031:[TYPE] Complex
031:[LBRACE] {
032:[LBRACE] {
033:[ID] x
033:[EQUAL] =
033:[NEG] ~
033:[ID] x
033:[SEMICOLON] ;
034:[ID] y
034:[EQUAL] =
034:[NEG] ~
034:[ID] y
034:[SEMICOLON] ;
035:[ID] self
035:[SEMICOLON] ;
036:[RBRACE] }
037:[RBRACE] }
037:[SEMICOLON] ;
039:[ID] reflect_X
039:[LPAREN] (
039:[RPAREN] )
039:[COLON] :
039:[TYPE] Complex
039:[LBRACE] {
040:[LBRACE] {
041:[ID] y
041:[EQUAL] =
041:[NEG] ~
041:[ID] y
041:[SEMICOLON] ;
042:[ID] self
042:[SEMICOLON] ;
043:[RBRACE] }
044:[RBRACE] }
044:[SEMICOLON] ;
046:[ID] reflect_Y
046:[LPAREN] (
046:[RPAREN] )
046:[COLON] :
046:[TYPE] Complex
046:[LBRACE] {
047:[LBRACE] {
048:[ID] x
048:[EQUAL] =
048:[NEG] ~
048:[ID] x
048:[SEMICOLON] ;
049:[ID] self
049:[SEMICOLON] ;
050:[RBRACE] }
051:[RBRACE] }
051:[SEMICOLON] ;
052:[RBRACE] }
052:[SEMICOLON] ;
