013:[CLASS] class
013:[TYPE] A2I
013:[LBRACE] {
015:[ID] c2i
015:[LPAREN] (
015:[ID] char
015:[COLON] :
015:[TYPE] String
015:[RPAREN] )
015:[COLON] :
015:[TYPE] Int
015:[LBRACE] {
016:[IF] if
016:[ID] char
016:[EQUAL] =
016:[STRING] "0"
016:[THEN] then
016:[INTEGER] 0
016:[ELSE] else
017:[IF] if
017:[ID] char
017:[EQUAL] =
017:[STRING] "1"
017:[THEN] then
017:[INTEGER] 1
017:[ELSE] else
018:[IF] if
018:[ID] char
018:[EQUAL] =
018:[STRING] "2"
018:[THEN] then
018:[INTEGER] 2
018:[ELSE] else
019:[IF] if
019:[ID] char
019:[EQUAL] =
019:[STRING] "3"
019:[THEN] then
019:[INTEGER] 3
019:[ELSE] else
020:[IF] if
020:[ID] char
020:[EQUAL] =
020:[STRING] "4"
020:[THEN] then
020:[INTEGER] 4
020:[ELSE] else
021:[IF] if
021:[ID] char
021:[EQUAL] =
021:[STRING] "5"
021:[THEN] then
021:[INTEGER] 5
021:[ELSE] else
022:[IF] if
022:[ID] char
022:[EQUAL] =
022:[STRING] "6"
022:[THEN] then
022:[INTEGER] 6
022:[ELSE] else
023:[IF] if
023:[ID] char
023:[EQUAL] =
023:[STRING] "7"
023:[THEN] then
023:[INTEGER] 7
023:[ELSE] else
024:[IF] if
024:[ID] char
024:[EQUAL] =
024:[STRING] "8"
024:[THEN] then
024:[INTEGER] 8
024:[ELSE] else
025:[IF] if
025:[ID] char
025:[EQUAL] =
025:[STRING] "9"
025:[THEN] then
025:[INTEGER] 9
025:[ELSE] else
026:[LBRACE] {
026:[ID] abort
026:[LPAREN] (
026:[RPAREN] )
026:[SEMICOLON] ;
026:[INTEGER] 0
026:[SEMICOLON] ;
026:[RBRACE] }
027:[FI] fi
027:[FI] fi
027:[FI] fi
027:[FI] fi
027:[FI] fi
027:[FI] fi
027:[FI] fi
027:[FI] fi
027:[FI] fi
027:[FI] fi
028:[RBRACE] }
028:[SEMICOLON] ;
033:[ID] i2c
033:[LPAREN] (
033:[ID] i
033:[COLON] :
033:[TYPE] Int
033:[RPAREN] )
033:[COLON] :
033:[TYPE] String
033:[LBRACE] {
034:[IF] if
034:[ID] i
034:[EQUAL] =
034:[INTEGER] 0
034:[THEN] then
034:[STRING] "0"
034:[ELSE] else
035:[IF] if
035:[ID] i
035:[EQUAL] =
035:[INTEGER] 1
035:[THEN] then
035:[STRING] "1"
035:[ELSE] else
036:[IF] if
036:[ID] i
036:[EQUAL] =
036:[INTEGER] 2
036:[THEN] then
036:[STRING] "2"
036:[ELSE] else
037:[IF] if
037:[ID] i
037:[EQUAL] =
037:[INTEGER] 3
037:[THEN] then
037:[STRING] "3"
037:[ELSE] else
038:[IF] if
038:[ID] i
038:[EQUAL] =
038:[INTEGER] 4
038:[THEN] then
038:[STRING] "4"
038:[ELSE] else
039:[IF] if
039:[ID] i
039:[EQUAL] =
039:[INTEGER] 5
039:[THEN] then
039:[STRING] "5"
039:[ELSE] else
040:[IF] if
040:[ID] i
040:[EQUAL] =
040:[INTEGER] 6
040:[THEN] then
040:[STRING] "6"
040:[ELSE] else
041:[IF] if
041:[ID] i
041:[EQUAL] =
041:[INTEGER] 7
041:[THEN] then
041:[STRING] "7"
041:[ELSE] else
042:[IF] if
042:[ID] i
042:[EQUAL] =
042:[INTEGER] 8
042:[THEN] then
042:[STRING] "8"
042:[ELSE] else
043:[IF] if
043:[ID] i
043:[EQUAL] =
043:[INTEGER] 9
043:[THEN] then
043:[STRING] "9"
043:[ELSE] else
044:[LBRACE] {
044:[ID] abort
044:[LPAREN] (
044:[RPAREN] )
044:[SEMICOLON] ;
044:[STRING] ""
044:[SEMICOLON] ;
044:[RBRACE] }
045:[FI] fi
045:[FI] fi
045:[FI] fi
045:[FI] fi
045:[FI] fi
045:[FI] fi
045:[FI] fi
045:[FI] fi
045:[FI] fi
045:[FI] fi
046:[RBRACE] }
046:[SEMICOLON] ;
056:[ID] a2i
056:[LPAREN] (
056:[ID] s
056:[COLON] :
056:[TYPE] String
056:[RPAREN] )
056:[COLON] :
056:[TYPE] Int
056:[LBRACE] {
057:[IF] if
057:[ID] s
057:[DOT] .
057:[ID] length
057:[LPAREN] (
057:[RPAREN] )
057:[EQUAL] =
057:[INTEGER] 0
057:[THEN] then
057:[INTEGER] 0
057:[ELSE] else
058:[IF] if
058:[ID] s
058:[DOT] .
058:[ID] substr
058:[LPAREN] (
058:[INTEGER] 0
058:[COMMA] ,
058:[INTEGER] 1
058:[RPAREN] )
058:[EQUAL] =
058:[STRING] "-"
058:[THEN] then
058:[NEG] ~
058:[ID] a2i_aux
058:[LPAREN] (
058:[ID] s
058:[DOT] .
058:[ID] substr
058:[LPAREN] (
058:[INTEGER] 1
058:[COMMA] ,
058:[ID] s
058:[DOT] .
058:[ID] length
058:[LPAREN] (
058:[RPAREN] )
058:[MINUS] -
058:[INTEGER] 1
058:[RPAREN] )
058:[RPAREN] )
058:[ELSE] else
059:[IF] if
059:[ID] s
059:[DOT] .
059:[ID] substr
059:[LPAREN] (
059:[INTEGER] 0
059:[COMMA] ,
059:[INTEGER] 1
059:[RPAREN] )
059:[EQUAL] =
059:[STRING] "+"
059:[THEN] then
059:[ID] a2i_aux
059:[LPAREN] (
059:[ID] s
059:[DOT] .
059:[ID] substr
059:[LPAREN] (
059:[INTEGER] 1
059:[COMMA] ,
059:[ID] s
059:[DOT] .
059:[ID] length
059:[LPAREN] (
059:[RPAREN] )
059:[MINUS] -
059:[INTEGER] 1
059:[RPAREN] )
059:[RPAREN] )
059:[ELSE] else
060:[ID] a2i_aux
060:[LPAREN] (
060:[ID] s
060:[RPAREN] )
061:[FI] fi
061:[FI] fi
061:[FI] fi
062:[RBRACE] }
062:[SEMICOLON] ;
068:[ID] a2i_aux
068:[LPAREN] (
068:[ID] s
068:[COLON] :
068:[TYPE] String
068:[RPAREN] )
068:[COLON] :
068:[TYPE] Int
068:[LBRACE] {
069:[LPAREN] (
069:[LET] let
069:[ID] int
069:[COLON] :
069:[TYPE] Int
069:[ASSIGN] <-
069:[INTEGER] 0
069:[IN] in
070:[LBRACE] {
071:[LPAREN] (
071:[LET] let
071:[ID] j
071:[COLON] :
071:[TYPE] Int
071:[ASSIGN] <-
071:[ID] s
071:[DOT] .
071:[ID] length
071:[LPAREN] (
071:[RPAREN] )
071:[IN] in
072:[LPAREN] (
072:[LET] let
072:[ID] i
072:[COLON] :
072:[TYPE] Int
072:[ASSIGN] <-
072:[INTEGER] 0
072:[IN] in
073:[WHILE] while
073:[ID] i
073:[LT] <
073:[ID] j
073:[LOOP] loop
074:[LBRACE] {
075:[ID] int
075:[ASSIGN] <-
075:[ID] int
075:[MUL] *
075:[INTEGER] 10
075:[PLUS] +
075:[ID] c2i
075:[LPAREN] (
075:[ID] s
075:[DOT] .
075:[ID] substr
075:[LPAREN] (
075:[ID] i
075:[COMMA] ,
075:[INTEGER] 1
075:[RPAREN] )
075:[RPAREN] )
075:[SEMICOLON] ;
076:[ID] i
076:[ASSIGN] <-
076:[ID] i
076:[PLUS] +
076:[INTEGER] 1
076:[SEMICOLON] ;
077:[RBRACE] }
078:[POOL] pool
079:[RPAREN] )
080:[RPAREN] )
080:[SEMICOLON] ;
081:[ID] int
081:[SEMICOLON] ;
082:[RBRACE] }
083:[RPAREN] )
084:[RBRACE] }
084:[SEMICOLON] ;
090:[ID] i2a
090:[LPAREN] (
090:[ID] i
090:[COLON] :
090:[TYPE] Int
090:[RPAREN] )
090:[COLON] :
090:[TYPE] String
090:[LBRACE] {
091:[IF] if
091:[ID] i
091:[EQUAL] =
091:[INTEGER] 0
091:[THEN] then
091:[STRING] "0"
091:[ELSE] else
092:[IF] if
092:[INTEGER] 0
092:[LT] <
092:[ID] i
092:[THEN] then
092:[ID] i2a_aux
092:[LPAREN] (
092:[ID] i
092:[RPAREN] )
092:[ELSE] else
093:[STRING] "-"
093:[DOT] .
093:[ID] concat
093:[LPAREN] (
093:[ID] i2a_aux
093:[LPAREN] (
093:[ID] i
093:[MUL] *
093:[NEG] ~
093:[INTEGER] 1
093:[RPAREN] )
093:[RPAREN] )
094:[FI] fi
094:[FI] fi
095:[RBRACE] }
095:[SEMICOLON] ;
100:[ID] i2a_aux
100:[LPAREN] (
100:[ID] i
100:[COLON] :
100:[TYPE] Int
100:[RPAREN] )
100:[COLON] :
100:[TYPE] String
100:[LBRACE] {
101:[IF] if
101:[ID] i
101:[EQUAL] =
101:[INTEGER] 0
101:[THEN] then
101:[STRING] ""
101:[ELSE] else
102:[LPAREN] (
102:[LET] let
102:[ID] next
102:[COLON] :
102:[TYPE] Int
102:[ASSIGN] <-
102:[ID] i
102:[DIV] /
102:[INTEGER] 10
102:[IN] in
103:[ID] i2a_aux
103:[LPAREN] (
103:[ID] next
103:[RPAREN] )
103:[DOT] .
103:[ID] concat
103:[LPAREN] (
103:[ID] i2c
103:[LPAREN] (
103:[ID] i
103:[MINUS] -
103:[ID] next
103:[MUL] *
103:[INTEGER] 10
103:[RPAREN] )
103:[RPAREN] )
104:[RPAREN] )
105:[FI] fi
106:[RBRACE] }
106:[SEMICOLON] ;
108:[RBRACE] }
108:[SEMICOLON] ;
