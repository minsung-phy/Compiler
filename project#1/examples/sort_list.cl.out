024:[CLASS] Class
024:[TYPE] List
024:[INHERITS] inherits
024:[TYPE] IO
024:[LBRACE] {
028:[ID] isNil
028:[LPAREN] (
028:[RPAREN] )
028:[COLON] :
028:[TYPE] Bool
028:[LBRACE] {
028:[LBRACE] {
028:[ID] abort
028:[LPAREN] (
028:[RPAREN] )
028:[SEMICOLON] ;
028:[TRUE] true
028:[SEMICOLON] ;
028:[RBRACE] }
028:[RBRACE] }
028:[SEMICOLON] ;
030:[ID] cons
030:[LPAREN] (
030:[ID] hd
030:[COLON] :
030:[TYPE] Int
030:[RPAREN] )
030:[COLON] :
030:[TYPE] Cons
030:[LBRACE] {
031:[LPAREN] (
031:[LET] let
031:[ID] new_cell
031:[COLON] :
031:[TYPE] Cons
031:[ASSIGN] <-
031:[NEW] new
031:[TYPE] Cons
031:[IN] in
032:[ID] new_cell
032:[DOT] .
032:[ID] init
032:[LPAREN] (
032:[ID] hd
032:[COMMA] ,
032:[ID] self
032:[RPAREN] )
033:[RPAREN] )
034:[RBRACE] }
034:[SEMICOLON] ;
041:[ID] car
041:[LPAREN] (
041:[RPAREN] )
041:[COLON] :
041:[TYPE] Int
041:[LBRACE] {
041:[LBRACE] {
041:[ID] abort
041:[LPAREN] (
041:[RPAREN] )
041:[SEMICOLON] ;
041:[NEW] new
041:[TYPE] Int
041:[SEMICOLON] ;
041:[RBRACE] }
041:[RBRACE] }
041:[SEMICOLON] ;
043:[ID] cdr
043:[LPAREN] (
043:[RPAREN] )
043:[COLON] :
043:[TYPE] List
043:[LBRACE] {
043:[LBRACE] {
043:[ID] abort
043:[LPAREN] (
043:[RPAREN] )
043:[SEMICOLON] ;
043:[NEW] new
043:[TYPE] List
043:[SEMICOLON] ;
043:[RBRACE] }
043:[RBRACE] }
043:[SEMICOLON] ;
045:[ID] rev
045:[LPAREN] (
045:[RPAREN] )
045:[COLON] :
045:[TYPE] List
045:[LBRACE] {
045:[ID] cdr
045:[LPAREN] (
045:[RPAREN] )
045:[RBRACE] }
045:[SEMICOLON] ;
047:[ID] sort
047:[LPAREN] (
047:[RPAREN] )
047:[COLON] :
047:[TYPE] List
047:[LBRACE] {
047:[ID] cdr
047:[LPAREN] (
047:[RPAREN] )
047:[RBRACE] }
047:[SEMICOLON] ;
049:[ID] insert
049:[LPAREN] (
049:[ID] i
049:[COLON] :
049:[TYPE] Int
049:[RPAREN] )
049:[COLON] :
049:[TYPE] List
049:[LBRACE] {
049:[ID] cdr
049:[LPAREN] (
049:[RPAREN] )
049:[RBRACE] }
049:[SEMICOLON] ;
051:[ID] rcons
051:[LPAREN] (
051:[ID] i
051:[COLON] :
051:[TYPE] Int
051:[RPAREN] )
051:[COLON] :
051:[TYPE] List
051:[LBRACE] {
051:[ID] cdr
051:[LPAREN] (
051:[RPAREN] )
051:[RBRACE] }
051:[SEMICOLON] ;
053:[ID] print_list
053:[LPAREN] (
053:[RPAREN] )
053:[COLON] :
053:[TYPE] Object
053:[LBRACE] {
053:[ID] abort
053:[LPAREN] (
053:[RPAREN] )
053:[RBRACE] }
053:[SEMICOLON] ;
054:[RBRACE] }
054:[SEMICOLON] ;
056:[CLASS] Class
056:[TYPE] Cons
056:[INHERITS] inherits
056:[TYPE] List
056:[LBRACE] {
057:[ID] xcar
057:[COLON] :
057:[TYPE] Int
057:[SEMICOLON] ;
058:[ID] xcdr
058:[COLON] :
058:[TYPE] List
058:[SEMICOLON] ;
062:[ID] isNil
062:[LPAREN] (
062:[RPAREN] )
062:[COLON] :
062:[TYPE] Bool
062:[LBRACE] {
062:[FALSE] false
062:[RBRACE] }
062:[SEMICOLON] ;
064:[ID] init
064:[LPAREN] (
064:[ID] hd
064:[COLON] :
064:[TYPE] Int
064:[COMMA] ,
064:[ID] tl
064:[COLON] :
064:[TYPE] List
064:[RPAREN] )
064:[COLON] :
064:[TYPE] Cons
064:[LBRACE] {
065:[LBRACE] {
066:[ID] xcar
066:[ASSIGN] <-
066:[ID] hd
066:[SEMICOLON] ;
067:[ID] xcdr
067:[ASSIGN] <-
067:[ID] tl
067:[SEMICOLON] ;
068:[ID] self
068:[SEMICOLON] ;
069:[RBRACE] }
070:[RBRACE] }
070:[SEMICOLON] ;
072:[ID] car
072:[LPAREN] (
072:[RPAREN] )
072:[COLON] :
072:[TYPE] Int
072:[LBRACE] {
072:[ID] xcar
072:[RBRACE] }
072:[SEMICOLON] ;
074:[ID] cdr
074:[LPAREN] (
074:[RPAREN] )
074:[COLON] :
074:[TYPE] List
074:[LBRACE] {
074:[ID] xcdr
074:[RBRACE] }
074:[SEMICOLON] ;
076:[ID] rev
076:[LPAREN] (
076:[RPAREN] )
076:[COLON] :
076:[TYPE] List
076:[LBRACE] {
076:[LPAREN] (
076:[ID] xcdr
076:[DOT] .
076:[ID] rev
076:[LPAREN] (
076:[RPAREN] )
076:[RPAREN] )
076:[DOT] .
076:[ID] rcons
076:[LPAREN] (
076:[ID] xcar
076:[RPAREN] )
076:[RBRACE] }
076:[SEMICOLON] ;
078:[ID] sort
078:[LPAREN] (
078:[RPAREN] )
078:[COLON] :
078:[TYPE] List
078:[LBRACE] {
078:[LPAREN] (
078:[ID] xcdr
078:[DOT] .
078:[ID] sort
078:[LPAREN] (
078:[RPAREN] )
078:[RPAREN] )
078:[DOT] .
078:[ID] insert
078:[LPAREN] (
078:[ID] xcar
078:[RPAREN] )
078:[RBRACE] }
078:[SEMICOLON] ;
080:[ID] insert
080:[LPAREN] (
080:[ID] i
080:[COLON] :
080:[TYPE] Int
080:[RPAREN] )
080:[COLON] :
080:[TYPE] List
080:[LBRACE] {
081:[IF] if
081:[ID] i
081:[LT] <
081:[ID] xcar
081:[THEN] then
082:[LPAREN] (
082:[NEW] new
082:[TYPE] Cons
082:[RPAREN] )
082:[DOT] .
082:[ID] init
082:[LPAREN] (
082:[ID] i
082:[COMMA] ,
082:[ID] self
082:[RPAREN] )
083:[ELSE] else
084:[LPAREN] (
084:[NEW] new
084:[TYPE] Cons
084:[RPAREN] )
084:[DOT] .
084:[ID] init
084:[LPAREN] (
084:[ID] xcar
084:[COMMA] ,
084:[ID] xcdr
084:[DOT] .
084:[ID] insert
084:[LPAREN] (
084:[ID] i
084:[RPAREN] )
084:[RPAREN] )
085:[FI] fi
086:[RBRACE] }
086:[SEMICOLON] ;
089:[ID] rcons
089:[LPAREN] (
089:[ID] i
089:[COLON] :
089:[TYPE] Int
089:[RPAREN] )
089:[COLON] :
089:[TYPE] List
089:[LBRACE] {
089:[LPAREN] (
089:[NEW] new
089:[TYPE] Cons
089:[RPAREN] )
089:[DOT] .
089:[ID] init
089:[LPAREN] (
089:[ID] xcar
089:[COMMA] ,
089:[ID] xcdr
089:[DOT] .
089:[ID] rcons
089:[LPAREN] (
089:[ID] i
089:[RPAREN] )
089:[RPAREN] )
089:[RBRACE] }
089:[SEMICOLON] ;
091:[ID] print_list
091:[LPAREN] (
091:[RPAREN] )
091:[COLON] :
091:[TYPE] Object
091:[LBRACE] {
092:[LBRACE] {
093:[ID] out_int
093:[LPAREN] (
093:[ID] xcar
093:[RPAREN] )
093:[SEMICOLON] ;
094:[ID] out_string
094:[LPAREN] (
094:[STRING] "\n"
094:[RPAREN] )
094:[SEMICOLON] ;
095:[ID] xcdr
095:[DOT] .
095:[ID] print_list
095:[LPAREN] (
095:[RPAREN] )
095:[SEMICOLON] ;
096:[RBRACE] }
097:[RBRACE] }
097:[SEMICOLON] ;
098:[RBRACE] }
098:[SEMICOLON] ;
100:[CLASS] Class
100:[TYPE] Nil
100:[INHERITS] inherits
100:[TYPE] List
100:[LBRACE] {
101:[ID] isNil
101:[LPAREN] (
101:[RPAREN] )
101:[COLON] :
101:[TYPE] Bool
101:[LBRACE] {
101:[TRUE] true
101:[RBRACE] }
101:[SEMICOLON] ;
103:[ID] rev
103:[LPAREN] (
103:[RPAREN] )
103:[COLON] :
103:[TYPE] List
103:[LBRACE] {
103:[ID] self
103:[RBRACE] }
103:[SEMICOLON] ;
105:[ID] sort
105:[LPAREN] (
105:[RPAREN] )
105:[COLON] :
105:[TYPE] List
105:[LBRACE] {
105:[ID] self
105:[RBRACE] }
105:[SEMICOLON] ;
107:[ID] insert
107:[LPAREN] (
107:[ID] i
107:[COLON] :
107:[TYPE] Int
107:[RPAREN] )
107:[COLON] :
107:[TYPE] List
107:[LBRACE] {
107:[ID] rcons
107:[LPAREN] (
107:[ID] i
107:[RPAREN] )
107:[RBRACE] }
107:[SEMICOLON] ;
109:[ID] rcons
109:[LPAREN] (
109:[ID] i
109:[COLON] :
109:[TYPE] Int
109:[RPAREN] )
109:[COLON] :
109:[TYPE] List
109:[LBRACE] {
109:[LPAREN] (
109:[NEW] new
109:[TYPE] Cons
109:[RPAREN] )
109:[DOT] .
109:[ID] init
109:[LPAREN] (
109:[ID] i
109:[COMMA] ,
109:[ID] self
109:[RPAREN] )
109:[RBRACE] }
109:[SEMICOLON] ;
111:[ID] print_list
111:[LPAREN] (
111:[RPAREN] )
111:[COLON] :
111:[TYPE] Object
111:[LBRACE] {
111:[TRUE] true
111:[RBRACE] }
111:[SEMICOLON] ;
113:[RBRACE] }
113:[SEMICOLON] ;
116:[CLASS] Class
116:[TYPE] Main
116:[INHERITS] inherits
116:[TYPE] IO
116:[LBRACE] {
118:[ID] l
118:[COLON] :
118:[TYPE] List
118:[SEMICOLON] ;
121:[ID] iota
121:[LPAREN] (
121:[ID] i
121:[COLON] :
121:[TYPE] Int
121:[RPAREN] )
121:[COLON] :
121:[TYPE] List
121:[LBRACE] {
122:[LBRACE] {
123:[ID] l
123:[ASSIGN] <-
123:[NEW] new
123:[TYPE] Nil
123:[SEMICOLON] ;
124:[LPAREN] (
124:[LET] let
124:[ID] j
124:[COLON] :
124:[TYPE] Int
124:[ASSIGN] <-
124:[INTEGER] 0
124:[IN] in
125:[WHILE] while
125:[ID] j
125:[LT] <
125:[ID] i
126:[LOOP] loop
127:[LBRACE] {
128:[ID] l
128:[ASSIGN] <-
128:[LPAREN] (
128:[NEW] new
128:[TYPE] Cons
128:[RPAREN] )
128:[DOT] .
128:[ID] init
128:[LPAREN] (
128:[ID] j
128:[COMMA] ,
128:[ID] l
128:[RPAREN] )
128:[SEMICOLON] ;
129:[ID] j
129:[ASSIGN] <-
129:[ID] j
129:[PLUS] +
129:[INTEGER] 1
129:[SEMICOLON] ;
130:[RBRACE] }
131:[POOL] pool
132:[RPAREN] )
132:[SEMICOLON] ;
133:[ID] l
133:[SEMICOLON] ;
134:[RBRACE] }
135:[RBRACE] }
135:[SEMICOLON] ;
137:[ID] main
137:[LPAREN] (
137:[RPAREN] )
137:[COLON] :
137:[TYPE] Object
137:[LBRACE] {
138:[LBRACE] {
139:[ID] out_string
139:[LPAREN] (
139:[STRING] "How many numbers to sort?"
139:[RPAREN] )
139:[SEMICOLON] ;
140:[ID] iota
140:[LPAREN] (
140:[ID] in_int
140:[LPAREN] (
140:[RPAREN] )
140:[RPAREN] )
140:[DOT] .
140:[ID] rev
140:[LPAREN] (
140:[RPAREN] )
140:[DOT] .
140:[ID] sort
140:[LPAREN] (
140:[RPAREN] )
140:[DOT] .
140:[ID] print_list
140:[LPAREN] (
140:[RPAREN] )
140:[SEMICOLON] ;
141:[RBRACE] }
142:[RBRACE] }
142:[SEMICOLON] ;
143:[RBRACE] }
143:[SEMICOLON] ;
