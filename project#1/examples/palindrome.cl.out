001:[CLASS] class
001:[TYPE] Main
001:[INHERITS] inherits
001:[TYPE] IO
001:[LBRACE] {
002:[ID] pal
002:[LPAREN] (
002:[ID] s
002:[COLON] :
002:[TYPE] String
002:[RPAREN] )
002:[COLON] :
002:[TYPE] Bool
002:[LBRACE] {
003:[IF] if
003:[ID] s
003:[DOT] .
003:[ID] length
003:[LPAREN] (
003:[RPAREN] )
003:[EQUAL] =
003:[INTEGER] 0
004:[THEN] then
004:[TRUE] true
005:[ELSE] else
005:[IF] if
005:[ID] s
005:[DOT] .
005:[ID] length
005:[LPAREN] (
005:[RPAREN] )
005:[EQUAL] =
005:[INTEGER] 1
006:[THEN] then
006:[TRUE] true
007:[ELSE] else
007:[IF] if
007:[ID] s
007:[DOT] .
007:[ID] substr
007:[LPAREN] (
007:[INTEGER] 0
007:[COMMA] ,
007:[INTEGER] 1
007:[RPAREN] )
007:[EQUAL] =
007:[ID] s
007:[DOT] .
007:[ID] substr
007:[LPAREN] (
007:[ID] s
007:[DOT] .
007:[ID] length
007:[LPAREN] (
007:[RPAREN] )
007:[MINUS] -
007:[INTEGER] 1
007:[COMMA] ,
007:[INTEGER] 1
007:[RPAREN] )
008:[THEN] then
008:[ID] pal
008:[LPAREN] (
008:[ID] s
008:[DOT] .
008:[ID] substr
008:[LPAREN] (
008:[INTEGER] 1
008:[COMMA] ,
008:[ID] s
008:[DOT] .
008:[ID] length
008:[LPAREN] (
008:[RPAREN] )
008:[MINUS] -
008:[INTEGER] 2
008:[RPAREN] )
008:[RPAREN] )
009:[ELSE] else
009:[FALSE] false
010:[FI] fi
010:[FI] fi
010:[FI] fi
011:[RBRACE] }
011:[SEMICOLON] ;
013:[ID] i
013:[COLON] :
013:[TYPE] Int
013:[SEMICOLON] ;
015:[ID] main
015:[LPAREN] (
015:[RPAREN] )
015:[COLON] :
015:[TYPE] SELF_TYPE
015:[LBRACE] {
016:[LBRACE] {
017:[ID] i
017:[ASSIGN] <-
017:[NEG] ~
017:[INTEGER] 1
017:[SEMICOLON] ;
018:[ID] out_string
018:[LPAREN] (
018:[STRING] "enter a string\n"
018:[RPAREN] )
018:[SEMICOLON] ;
019:[IF] if
019:[ID] pal
019:[LPAREN] (
019:[ID] in_string
019:[LPAREN] (
019:[RPAREN] )
019:[RPAREN] )
020:[THEN] then
020:[ID] out_string
020:[LPAREN] (
020:[STRING] "that was a palindrome\n"
020:[RPAREN] )
021:[ELSE] else
021:[ID] out_string
021:[LPAREN] (
021:[STRING] "that was not a palindrome\n"
021:[RPAREN] )
022:[FI] fi
022:[SEMICOLON] ;
023:[RBRACE] }
024:[RBRACE] }
024:[SEMICOLON] ;
025:[RBRACE] }
025:[SEMICOLON] ;
