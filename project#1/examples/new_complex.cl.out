001:[CLASS] class
001:[TYPE] Main
001:[INHERITS] inherits
001:[TYPE] IO
001:[LBRACE] {
002:[ID] main
002:[LPAREN] (
002:[RPAREN] )
002:[COLON] :
002:[TYPE] SELF_TYPE
002:[LBRACE] {
003:[LPAREN] (
003:[LET] let
003:[ID] c
003:[COLON] :
003:[TYPE] Complex
003:[ASSIGN] <-
003:[LPAREN] (
003:[NEW] new
003:[TYPE] Complex
003:[RPAREN] )
003:[DOT] .
003:[ID] init
003:[LPAREN] (
003:[INTEGER] 1
003:[COMMA] ,
003:[INTEGER] 1
003:[RPAREN] )
003:[IN] in
004:[LBRACE] {
006:[IF] if
006:[ID] c
006:[DOT] .
006:[ID] reflect_X
006:[LPAREN] (
006:[RPAREN] )
006:[EQUAL] =
006:[ID] c
006:[DOT] .
006:[ID] reflect_0
006:[LPAREN] (
006:[RPAREN] )
007:[THEN] then
007:[ID] out_string
007:[LPAREN] (
007:[STRING] "=)\n"
007:[RPAREN] )
008:[ELSE] else
008:[ID] out_string
008:[LPAREN] (
008:[STRING] "=(\n"
008:[RPAREN] )
009:[FI] fi
009:[SEMICOLON] ;
011:[IF] if
011:[ID] c
011:[DOT] .
011:[ID] reflect_X
011:[LPAREN] (
011:[RPAREN] )
011:[DOT] .
011:[ID] reflect_Y
011:[LPAREN] (
011:[RPAREN] )
011:[DOT] .
011:[ID] equal
011:[LPAREN] (
011:[ID] c
011:[DOT] .
011:[ID] reflect_0
011:[LPAREN] (
011:[RPAREN] )
011:[RPAREN] )
012:[THEN] then
012:[ID] out_string
012:[LPAREN] (
012:[STRING] "=)\n"
012:[RPAREN] )
013:[ELSE] else
013:[ID] out_string
013:[LPAREN] (
013:[STRING] "=(\n"
013:[RPAREN] )
014:[FI] fi
014:[SEMICOLON] ;
015:[RBRACE] }
016:[RPAREN] )
017:[RBRACE] }
017:[SEMICOLON] ;
018:[RBRACE] }
018:[SEMICOLON] ;
020:[CLASS] class
020:[TYPE] Complex
020:[INHERITS] inherits
020:[TYPE] IO
020:[LBRACE] {
021:[ID] x
021:[COLON] :
021:[TYPE] Int
021:[SEMICOLON] ;
022:[ID] y
022:[COLON] :
022:[TYPE] Int
022:[SEMICOLON] ;
024:[ID] init
024:[LPAREN] (
024:[ID] a
024:[COLON] :
024:[TYPE] Int
024:[COMMA] ,
024:[ID] b
024:[COLON] :
024:[TYPE] Int
024:[RPAREN] )
024:[COLON] :
024:[TYPE] Complex
024:[LBRACE] {
025:[LBRACE] {
026:[ID] x
026:[EQUAL] =
026:[ID] a
026:[SEMICOLON] ;
027:[ID] y
027:[EQUAL] =
027:[ID] b
027:[SEMICOLON] ;
028:[ID] self
028:[SEMICOLON] ;
029:[RBRACE] }
030:[RBRACE] }
030:[SEMICOLON] ;
032:[ID] print
032:[LPAREN] (
032:[RPAREN] )
032:[COLON] :
032:[TYPE] Object
032:[LBRACE] {
033:[IF] if
033:[ID] y
033:[EQUAL] =
033:[INTEGER] 0
034:[THEN] then
034:[ID] out_int
034:[LPAREN] (
034:[ID] x
034:[RPAREN] )
035:[ELSE] else
035:[ID] out_int
035:[LPAREN] (
035:[ID] x
035:[RPAREN] )
035:[DOT] .
035:[ID] out_string
035:[LPAREN] (
035:[STRING] "+"
035:[RPAREN] )
035:[DOT] .
035:[ID] out_int
035:[LPAREN] (
035:[ID] y
035:[RPAREN] )
035:[DOT] .
035:[ID] out_string
035:[LPAREN] (
035:[STRING] "I"
035:[RPAREN] )
036:[FI] fi
037:[RBRACE] }
037:[SEMICOLON] ;
039:[ID] reflect_0
039:[LPAREN] (
039:[RPAREN] )
039:[COLON] :
039:[TYPE] Complex
039:[LBRACE] {
040:[LBRACE] {
041:[ID] x
041:[EQUAL] =
041:[NEG] ~
041:[ID] x
041:[SEMICOLON] ;
042:[ID] y
042:[EQUAL] =
042:[NEG] ~
042:[ID] y
042:[SEMICOLON] ;
043:[ID] self
043:[SEMICOLON] ;
044:[RBRACE] }
045:[RBRACE] }
045:[SEMICOLON] ;
047:[ID] reflect_X
047:[LPAREN] (
047:[RPAREN] )
047:[COLON] :
047:[TYPE] Complex
047:[LBRACE] {
048:[LBRACE] {
049:[ID] y
049:[EQUAL] =
049:[NEG] ~
049:[ID] y
049:[SEMICOLON] ;
050:[ID] self
050:[SEMICOLON] ;
051:[RBRACE] }
052:[RBRACE] }
052:[SEMICOLON] ;
054:[ID] reflect_Y
054:[LPAREN] (
054:[RPAREN] )
054:[COLON] :
054:[TYPE] Complex
054:[LBRACE] {
055:[LBRACE] {
056:[ID] x
056:[EQUAL] =
056:[NEG] ~
056:[ID] x
056:[SEMICOLON] ;
057:[ID] self
057:[SEMICOLON] ;
058:[RBRACE] }
059:[RBRACE] }
059:[SEMICOLON] ;
061:[ID] equal
061:[LPAREN] (
061:[ID] d
061:[COLON] :
061:[TYPE] Complex
061:[RPAREN] )
061:[COLON] :
061:[TYPE] Bool
061:[LBRACE] {
062:[IF] if
062:[ID] x
062:[EQUAL] =
062:[ID] d
062:[DOT] .
062:[ID] x_value
062:[LPAREN] (
062:[RPAREN] )
063:[THEN] then
064:[IF] if
064:[ID] y
064:[EQUAL] =
064:[ID] d
064:[DOT] .
064:[ID] y_value
064:[LPAREN] (
064:[RPAREN] )
065:[THEN] then
065:[TRUE] true
066:[ELSE] else
066:[FALSE] false
067:[FI] fi
068:[ELSE] else
068:[FALSE] false
069:[FI] fi
070:[RBRACE] }
070:[SEMICOLON] ;
072:[ID] x_value
072:[LPAREN] (
072:[RPAREN] )
072:[COLON] :
072:[TYPE] Int
072:[LBRACE] {
073:[ID] x
074:[RBRACE] }
074:[SEMICOLON] ;
076:[ID] y_value
076:[LPAREN] (
076:[RPAREN] )
076:[COLON] :
076:[TYPE] Int
076:[LBRACE] {
077:[ID] y
078:[RBRACE] }
078:[SEMICOLON] ;
079:[RBRACE] }
079:[SEMICOLON] ;
