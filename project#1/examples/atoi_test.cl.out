009:[CLASS] class
009:[TYPE] Main
009:[INHERITS] inherits
009:[TYPE] IO
009:[LBRACE] {
010:[ID] newline
010:[LPAREN] (
010:[RPAREN] )
010:[COLON] :
010:[TYPE] Object
010:[LBRACE] {
011:[ID] out_string
011:[LPAREN] (
011:[STRING] "\n"
011:[RPAREN] )
012:[RBRACE] }
012:[SEMICOLON] ;
014:[ID] prompt
014:[LPAREN] (
014:[RPAREN] )
014:[COLON] :
014:[TYPE] String
014:[LBRACE] {
015:[LBRACE] {
016:[ID] out_string
016:[LPAREN] (
016:[STRING] "Enter a number>"
016:[RPAREN] )
016:[SEMICOLON] ;
017:[ID] in_string
017:[LPAREN] (
017:[RPAREN] )
017:[SEMICOLON] ;
018:[RBRACE] }
019:[RBRACE] }
019:[SEMICOLON] ;
021:[ID] main
021:[LPAREN] (
021:[RPAREN] )
021:[COLON] :
021:[TYPE] Object
021:[LBRACE] {
025:[LPAREN] (
025:[LET] let
025:[ID] z
025:[COLON] :
025:[TYPE] A2I
025:[ASSIGN] <-
025:[NEW] new
025:[TYPE] A2I
025:[IN] in
026:[WHILE] while
026:[TRUE] true
026:[LOOP] loop
027:[LPAREN] (
027:[LET] let
027:[ID] s
027:[COLON] :
027:[TYPE] String
027:[ASSIGN] <-
027:[ID] prompt
027:[LPAREN] (
027:[RPAREN] )
027:[IN] in
028:[IF] if
028:[ID] s
028:[EQUAL] =
028:[STRING] "stop"
028:[THEN] then
029:[ID] abort
029:[LPAREN] (
029:[RPAREN] )
030:[ELSE] else
031:[LPAREN] (
031:[LET] let
031:[ID] i
031:[COLON] :
031:[TYPE] Int
031:[ASSIGN] <-
031:[ID] z
031:[DOT] .
031:[ID] a2i
031:[LPAREN] (
031:[ID] s
031:[RPAREN] )
031:[IN] in
032:[LPAREN] (
032:[LET] let
032:[ID] news
032:[COLON] :
032:[TYPE] String
032:[ASSIGN] <-
032:[ID] z
032:[DOT] .
032:[ID] i2a
032:[LPAREN] (
032:[ID] i
032:[RPAREN] )
032:[IN] in
033:[LBRACE] {
034:[ID] out_int
034:[LPAREN] (
034:[ID] i
034:[RPAREN] )
034:[SEMICOLON] ;
035:[ID] newline
035:[LPAREN] (
035:[RPAREN] )
035:[SEMICOLON] ;
036:[ID] out_string
036:[LPAREN] (
036:[ID] news
036:[RPAREN] )
036:[SEMICOLON] ;
037:[ID] newline
037:[LPAREN] (
037:[RPAREN] )
037:[SEMICOLON] ;
038:[RBRACE] }
039:[RPAREN] )
040:[RPAREN] )
041:[FI] fi
042:[RPAREN] )
043:[POOL] pool
044:[RPAREN] )
045:[RBRACE] }
045:[SEMICOLON] ;
046:[RBRACE] }
046:[SEMICOLON] ;
